import streamlit as st
import os
import subprocess
from llm_analysis import load_transcript, build_prompt, ask_llm, save_report

st.set_page_config(page_title="AI-–∞–Ω–∞–ª–∏–∑ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ", layout="centered")
st.title("üé¨ AI-–∞–Ω–∞–ª–∏–∑ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ")
st.markdown("## üì• –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ")

video_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª", type=["mp4", "mov", "webm"])
video_url = st.text_input("...–∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")

if st.button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑"):
    with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–µ–æ..."):
        os.makedirs("data", exist_ok=True)
        video_path = "data/input_video.mp4"

        if video_file:
            with open(video_path, "wb") as f:
                f.write(video_file.read())
        elif video_url:
            subprocess.run(["yt-dlp", video_url, "-o", video_path])
        else:
            st.warning("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É.")
            st.stop()

        subprocess.run(["python", "app/pipeline.py", video_path], check=True)

        transcript_path = "data/transcript.txt"
        if os.path.exists(transcript_path):
            transcript = load_transcript(transcript_path)
            prompt = build_prompt(transcript)
            response = ask_llm(prompt)
            save_report(response)

        report_path = "data/report.txt"
        if os.path.exists(report_path):
            with open(report_path, "r", encoding="utf-8") as f:
                report = f.read()
            st.markdown("## üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞")
            st.markdown(report, unsafe_allow_html=True)
        else:
            st.error("report.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
